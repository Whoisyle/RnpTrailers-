// Import required packages
const express = require('express');
const cors = require('cors');
const compression = require('compression');
require('dotenv').config();
const path = require('path');

const app = express();

// Security Middleware
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS || '*', // Restrict to specific origins in production
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(compression());
app.use(express.json({ limit: '10mb' })); // Limit payload size
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Basic security headers
app.use((req, res, next) => {
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  next();
});

// Routes
app.get('/', (req, res) => {
  res.json({ 
    message: 'RNP Trailer Rental System is running',
    status: 'active',
    version: '1.0.0'
  });
});

// Trailer routes with error handling
app.get('/trailers', async (req, res, next) => {
  try {
    res.json({ 
      message: 'List of trailers',
      trailers: []
    });
  } catch (error) {
    next(error);
  }
});

// Serve static files from public directory
app.use(express.static(path.join(__dirname, '../public')));

// 404 handler
app.use((req, res) => {
  res.status(404).json({ 
    error: 'Not Found',
    message: 'The requested resource was not found'
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(`Error: ${err.message}`);
  res.status(500).json({ 
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'production' 
      ? 'An unexpected error occurred' 
      : err.message
  });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

// Handle unhandled rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // In production, you might want to exit and let your process manager restart the app
  // process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  // In production, you might want to exit and let your process manager restart the app
  // process.exit(1);
});

module.exports = app; // For testing purposes 
